"""
Abstraction of root resources and drive resources. In the API, a "*dir" call accesses a directory, a "*file" call
accesses a file, and a "*item" call accesses either a directory or a file.
https://github.com/OneDrive/onedrive-api-docs#root-resources
"""

import requests

from . import facets
from . import items
from . import options


class DriveRoot:
    """
    An entry point to get associated drives.
    """

    def __init__(self, account):
        """
        :param onedrive_d.api.accounts.PersonalAccount | onedrive_d.api.accounts.BusinessAccount account:
        """
        self.account = account

    def get_all_drives(self):
        """
        :rtype dict[str, DriveObject]: a dictionary of all drives with keys being drive IDs.
        """
        uri = self.account.client.API_URI + '/drives'
        request = self.account.session.get(uri)
        all_drives = {d['id']: DriveObject(self, d) for d in request.json()['value']}
        return all_drives

    def get_default_drive(self, list_children=True):
        return self.get_drive(list_children=list_children)

    def get_drive(self, drive_id=None, list_children=True):
        """
        :param str | None drive_id: (Optional) ID of the target Drive. Use None to get default Drive.
        """
        uri = self.account.client.API_URI + '/drive'
        if drive_id is not None:
            uri = uri + 's/' + drive_id
        if list_children:
            uri += '?expand=children'
        request = self.account.session.get(uri)
        return DriveObject(self, request.json())


class DriveObject:
    """
    Abstracts a specific Drive resource. All items.OneDriveItem objects are generated by DriveObject API.
    """

    def __init__(self, root, data):
        """
        :param onedrive_d.api.drives.OneDriveRoot root: The parent root object.
        :param dict[str, T | str] data: The deserialized Drive dictionary.
        """
        self.root = root
        self._data = data
        self.drive_uri = root.account.client.API_URI + '/drives/' + data['id']

    @property
    def id(self):
        """
        Return the drive ID.
        :rtype: str
        """
        return self._data['id']

    @property
    def type(self):
        """
        Return a string representing the drive's type. {'personal', 'business'}
        :rtype: str
        """
        return self._data['driveType']

    @property
    def quota(self):
        return facets.QuotaFacet(self._data['quota'])

    def refresh(self):
        """
        Refresh metadata of the drive object.
        """
        new_drive = self.root.get_drive(self.id)
        self.__dict__.update(new_drive.__dict__)
        del new_drive

    def get_item_uri(self, item_id=None, item_path=None):
        uri = self.drive_uri
        if item_id is not None:
            uri = uri + '/items/' + item_id
        elif item_path is not None:
            uri = uri + '/root:/' + item_path
        else:
            uri += '/root'
        return uri

    def get_root_dir(self, list_children=True):
        return self.get_item(None, None, list_children)

    def search_item(self):
        pass

    def get_all_items(self):
        pass

    def get_item(self, item_id=None, item_path=None, list_children=True):
        """
        Retrieve the metadata of an item from OneDrive server.
        :param str | None item_id:  ID of the item. Required if item_path is None.
        :param str | None item_path: Path to the item relative to drive root. Required if item_id is None.
        :rtype: onedrive_d.api.items.OneDriveItem
        """
        uri = self.get_item_uri(item_id, item_path)
        if list_children:
            uri += '?expand=children'
        request = self.root.account.session.get(uri)
        return items.OneDriveItem(self, request.json())

    def create_dir(self, name, parent_id=None, parent_path=None,
                   conflict_behavior=options.NameConflictBehavior.DEFAULT):
        """
        Create a new directory under the specified parent directory.
        :param str name: Name of the new directory.
        :param str | None parent_id: (Optional) ID of the parent directory item.
        :param str | None parent_path: (Optional) Path to the parent directory item.
        :param str conflict_behavior: (Optional) What to do if name exists. One value from options.nameConflictBehavior.
        :return onedrive_d.api.items.OneDriveItem: The newly created directory item.
        """
        data = {
            'name': name,
            'folder': {},
            '@name.conflictBehavior': conflict_behavior
        }
        uri = self.get_item_uri(parent_id, parent_path)
        request = self.root.account.session.post(uri, json=data, ok_status_code=requests.codes.created)
        return items.OneDriveItem(self, request.json())

    def upload_file(self):
        pass

    def download_item(self, item_id=None, item_path=None, range_bytes=None, file=None, chunk_size=524288):
        """
        Download the content of an item.
        :param str | None item_id: ID of the target item.
        :param str | None item_path: Path to the target item.
        :param [int, int] | None range_bytes: Range of the bytes to download.
        :param file | None file: An opened file object. If set, write the content there. Otherwise return the content.
        :param int chunk_size: (Required if file is set.) Write content by chunks.
        :return bytes: The downloaded content.
        """
        uri = self.get_item_uri(item_id, item_path) + '/content'
        if range_bytes is None:
            headers = None
            ok_status_code = requests.codes.ok
        else:
            headers = {'Range': 'bytes=%d-%d' % range_bytes}
            ok_status_code = requests.codes.partial
        request = self.root.account.session.get(uri, headers=headers, ok_status_code=ok_status_code)
        if file is not None:
            for chunk in request.iter_content(chunk_size):
                file.write(chunk)
        else:
            return request.content

    def delete_item(self, item_id=None, item_path=None):
        """
        https://github.com/OneDrive/onedrive-api-docs/blob/master/items/delete.md
        Delete the specified item on OneDrive server.
        :param str | None item_id:  ID of the item. Required if item_path is None.
        :param str | None item_path: Path to the item relative to drive root. Required if item_id is None.
        """
        uri = self.get_item_uri(item_id, item_path)
        self.root.account.session.delete(uri, ok_status_code=requests.codes.no_content)

    def update_item(self, item_id=None, item_path=None,
                    new_name=None,
                    new_description=None,
                    new_parent_reference=None,
                    new_file_system_info=None):
        """
        Update the metadata of the specified item.
        :param str | None item_id: (Optional) ID of the target item.
        :param str | None item_path: (Optional) Path to the target item.
        :param str | None new_name: (Optional) If set, update the item metadata with the new name.
        :param str | None new_description: (Optional) If set, update the item metadata with the new description.
        :param onedrive_d.api.resources.ItemReferenceResource | None new_parent_reference: (Optional) If set,
        move the item.
        :param onedrive_d.api.facets.FileSystemInfoFacet | None new_file_system_info: (Optional) If set, update the
        client-wise timestamps.
        :return onedrive_d.api.items.OneDriveItem: The updated item.
        """
        if item_id is None and item_path is None:
            raise ValueError('Root is immutable. A specific item is required.')
        data = {}
        if new_name is not None:
            data['name'] = new_name
        if new_description is not None:
            data['description'] = new_description
        if new_parent_reference is not None:
            data['parentReference'] = new_parent_reference._data
        if new_file_system_info is not None:
            data['fileSystemInfo'] = new_file_system_info._data
        if len(data) == 0:
            raise ValueError('Nothing is to change.')
        uri = self.get_item_uri(item_id, item_path)
        request = self.root.account.session.patch(uri, data)
        return items.OneDriveItem(self, request.json())

    def copy_item(self):
        pass

    def get_thumbnail(self):
        pass

    def get_changes(self):
        pass

    def get_special_dir(self, name):
        pass
